CCS PCM C Compiler, Version 5.015, 5967               26-Apr-20 23:40

               Filename:   C:\Users\Renan\Scripts\Proteus\Projects\I²C com. PIC\C++ code\sender.lst

               ROM used:   58 words (1%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           5 (1%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses hs,nowdt 
.................... #use delay (clock=20M) 
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
.................... { 
....................     set_tris_b(0b00);//tris B diz que todos os pinos de porte B serão saída, isto é 0 = output e i = input. 
000F:  MOVLW  00
0010:  MOVWF  06
....................     //O '0' antes do 'b' indica que utilizaremos a linguagem binária 
....................     output_low(pin_b0);//inicia o pino 0 como LOW = 0 
0011:  BCF    06.0
0012:  BCF    03.5
0013:  BCF    06.0
....................     output_low(pin_b1);//inicia o pino 1 como LOW = 0 
0014:  BSF    03.5
0015:  BCF    06.1
0016:  BCF    03.5
0017:  BCF    06.1
....................  
....................  
....................      
....................     while(true) 
....................     { 
....................         output_high(pin_b0); 
0018:  BSF    03.5
0019:  BCF    06.0
001A:  BCF    03.5
001B:  BSF    06.0
....................         delay_us(1); 
001C:  GOTO   01D
001D:  GOTO   01E
001E:  NOP
....................         output_low(pin_b0); 
001F:  BSF    03.5
0020:  BCF    06.0
0021:  BCF    03.5
0022:  BCF    06.0
....................         delay_us(1); 
0023:  GOTO   024
0024:  GOTO   025
0025:  NOP
....................         output_high(pin_b1); 
0026:  BSF    03.5
0027:  BCF    06.1
0028:  BCF    03.5
0029:  BSF    06.1
....................         delay_us(10); 
002A:  MOVLW  10
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  NOP
....................         output_low(pin_b1); 
002F:  BSF    03.5
0030:  BCF    06.1
0031:  BCF    03.5
0032:  BCF    06.1
....................         delay_us(10); 
0033:  MOVLW  10
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  NOP
0038:  GOTO   018
....................      
....................      
....................      
....................     } 
....................      
....................  
.................... } 
0039:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
