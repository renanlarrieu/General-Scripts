// File: fifo_mem.v
// Generated by MyHDL 0.10
// Date: Tue Aug 21 12:53:38 2018


`timescale 1ns/10ps

module fifo_mem (
    wr,
    rd,
    data_in,
    fifo_full,
    fifo_empty,
    fifo_threshold,
    fifo_overflow,
    fifo_underflow,
    data_out,
    clk,
    rst_n,
    clear
);
// Input:
//     wr(bool):write signal
//     rd(bool):write signal
//     data_in(8bit): data to be writen
//     clk(bool): clock
//     rst_n(bool): negtive reset signal
//     clear(bool): signal to clear clear memeory to 0 
//     
// Output:
//     fifo_full(bool): signal indicating the fifo memory is full
//     fifo_empty(bool):signal indicating the fifo memory is empty
//     fifo_threshold(bool): signal indicating that the fifo is about to overflow
//     fifo_overflow(bool): signal indicating that the fifo has overflowed
//     fifo_underflow(bool): signal indicating that the fifo has underflowed
//     data_out(8bit): data to be read out 

input wr;
input rd;
input [7:0] data_in;
output fifo_full;
wire fifo_full;
output fifo_empty;
wire fifo_empty;
output fifo_threshold;
wire fifo_threshold;
output fifo_overflow;
wire fifo_overflow;
output fifo_underflow;
wire fifo_underflow;
output [7:0] data_out;
wire [7:0] data_out;
input clk;
input rst_n;
input clear;

wire [4:0] wptr;
wire fifo_we;
wire [4:0] rptr;
wire fifo_rd;
wire write_pointer0_0_1_fifo_we_i;
reg [4:0] write_pointer0_0_1_wptr_i = 0;
wire read_pointer0_0_1_fifo_rd_i;
reg [4:0] read_pointer0_0_1_rptr_i = 0;
reg fifoStatus0_0_1_underflow_set = 0;
reg signed [4:0] fifoStatus0_0_1_pointer_result = 0;
reg fifoStatus0_0_1_pointer_equal = 0;
reg fifoStatus0_0_1_overflow_set = 0;
reg fifoStatus0_0_1_fifo_underflow_i = 0;
reg fifoStatus0_0_1_fifo_threshold_i = 0;
reg fifoStatus0_0_1_fifo_overflow_i = 0;
reg fifoStatus0_0_1_fifo_full_i = 0;
reg fifoStatus0_0_1_fifo_empty_i = 0;
reg fifoStatus0_0_1_fbit_comp = 0;
reg [7:0] memory_array0_0_1_data_out_i [0:16-1];

initial begin: INITIALIZE_MEMORY_ARRAY0_0_1_DATA_OUT_I
    integer i;
    for(i=0; i<16; i=i+1) begin
        memory_array0_0_1_data_out_i[i] = 0;
    end
end





assign write_pointer0_0_1_fifo_we_i = ((!fifo_full) && wr);


always @(posedge clk, negedge rst_n) begin: FIFO_MEM_WRITE_POINTER0_0_1_POINTERUPDATE
    if (rst_n) begin
        write_pointer0_0_1_wptr_i <= 0;
    end
    else if (write_pointer0_0_1_fifo_we_i) begin
        write_pointer0_0_1_wptr_i <= (write_pointer0_0_1_wptr_i + 1);
    end
    else begin
        write_pointer0_0_1_wptr_i <= write_pointer0_0_1_wptr_i;
    end
end



assign fifo_we = write_pointer0_0_1_fifo_we_i;
assign wptr = write_pointer0_0_1_wptr_i;



assign read_pointer0_0_1_fifo_rd_i = ((!fifo_empty) && rd);


always @(posedge clk, negedge rst_n) begin: FIFO_MEM_READ_POINTER0_0_1_POINTERUPDATE
    if (rst_n) begin
        read_pointer0_0_1_rptr_i <= 0;
    end
    else if (read_pointer0_0_1_fifo_rd_i) begin
        read_pointer0_0_1_rptr_i <= (read_pointer0_0_1_rptr_i + 1);
    end
    else begin
        read_pointer0_0_1_rptr_i <= read_pointer0_0_1_rptr_i;
    end
end



assign fifo_rd = read_pointer0_0_1_fifo_rd_i;
assign rptr = read_pointer0_0_1_rptr_i;


always @(posedge clk) begin: FIFO_MEM_MEMORY_ARRAY0_0_1_UPTAKE
    if (fifo_we) begin
        memory_array0_0_1_data_out_i[wptr[4-1:0]] <= data_in;
    end
end



assign data_out = memory_array0_0_1_data_out_i[rptr[4-1:0]];


always @(negedge clear) begin: FIFO_MEM_MEMORY_ARRAY0_0_1_CLEARMEM
    integer i;
    for (i=0; i<16; i=i+1) begin
        memory_array0_0_1_data_out_i[i] <= 0;
    end
end


always @(fifoStatus0_0_1_fifo_full_i, fifoStatus0_0_1_fifo_empty_i, rd, wptr, wr, rptr) begin: FIFO_MEM_FIFOSTATUS0_0_1_LOGIC1
    fifoStatus0_0_1_fbit_comp = (wptr[4] ^ rptr[4]);
    if (($signed({1'b0, wptr[3-1:0]}) - rptr[3-1:0])) begin
        fifoStatus0_0_1_pointer_equal = 0;
    end
    else begin
        fifoStatus0_0_1_pointer_equal = 1;
    end
    fifoStatus0_0_1_pointer_result = (wptr[4-1:0] - rptr[4-1:0]);
    fifoStatus0_0_1_overflow_set = (fifoStatus0_0_1_fifo_full_i & wr);
    fifoStatus0_0_1_underflow_set = (fifoStatus0_0_1_fifo_empty_i & rd);
end


always @(fifoStatus0_0_1_fbit_comp, fifoStatus0_0_1_pointer_result, fifoStatus0_0_1_pointer_equal) begin: FIFO_MEM_FIFOSTATUS0_0_1_LOGIC2
    fifoStatus0_0_1_fifo_full_i = (fifoStatus0_0_1_fbit_comp & fifoStatus0_0_1_pointer_equal);
    fifoStatus0_0_1_fifo_empty_i = ((!fifoStatus0_0_1_fbit_comp) & fifoStatus0_0_1_pointer_equal);
    if ((fifoStatus0_0_1_pointer_result[4] || fifoStatus0_0_1_pointer_result[3])) begin
        fifoStatus0_0_1_fifo_threshold_i = 1;
    end
    else begin
        fifoStatus0_0_1_fifo_threshold_i = 0;
    end
end


always @(posedge clk, negedge rst_n) begin: FIFO_MEM_FIFOSTATUS0_0_1_OVERFLOWCONTROL
    if (rst_n) begin
        fifoStatus0_0_1_fifo_overflow_i <= 0;
    end
    else if (((fifoStatus0_0_1_overflow_set == 1) && (fifo_rd == 0))) begin
        fifoStatus0_0_1_fifo_overflow_i <= 1;
    end
    else if (fifo_rd) begin
        fifoStatus0_0_1_fifo_overflow_i <= 0;
    end
    else begin
        fifoStatus0_0_1_fifo_overflow_i <= fifoStatus0_0_1_fifo_overflow_i;
    end
end


always @(posedge clk, negedge rst_n) begin: FIFO_MEM_FIFOSTATUS0_0_1_UNDERFLOWCONTROL
    if (rst_n) begin
        fifoStatus0_0_1_fifo_underflow_i <= 0;
    end
    else if (((fifoStatus0_0_1_underflow_set == 1) && (fifo_we == 0))) begin
        fifoStatus0_0_1_fifo_underflow_i <= 1;
    end
    else if (fifo_we) begin
        fifoStatus0_0_1_fifo_underflow_i <= 0;
    end
    else begin
        fifoStatus0_0_1_fifo_underflow_i <= fifoStatus0_0_1_fifo_underflow_i;
    end
end



assign fifo_full = fifoStatus0_0_1_fifo_full_i;
assign fifo_empty = fifoStatus0_0_1_fifo_empty_i;
assign fifo_threshold = fifoStatus0_0_1_fifo_threshold_i;
assign fifo_overflow = fifoStatus0_0_1_fifo_overflow_i;
assign fifo_underflow = fifoStatus0_0_1_fifo_underflow_i;

endmodule
